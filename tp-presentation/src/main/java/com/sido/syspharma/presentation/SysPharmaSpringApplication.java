package com.sido.syspharma.presentation;

import com.sido.syspharma.domaine.enums.Role;
import com.sido.syspharma.domaine.exceptions.BusinessException;
import com.sido.syspharma.domaine.model.Client;
import com.sido.syspharma.service.ServiceClient;
// import com.sido.syspharma.service.ServiceMedicamentDB; // Si vous l'utilisez

import org.slf4j.Logger; // SLF4J Logger
import org.slf4j.LoggerFactory; // SLF4J LoggerFactory
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.ComponentScan;

import java.util.Scanner;

@SpringBootApplication
@ComponentScan(basePackages = {"com.sido.syspharma.service", "com.sido.syspharma.dao", "com.sido.syspharma.presentation"})
public class SysPharmaSpringApplication implements CommandLineRunner {

    // CORRECTION : Le logger doit √™tre associ√© √† la classe actuelle (SysPharmaSpringApplication)
    private static final Logger logger = LoggerFactory.getLogger(SysPharmaSpringApplication.class);

    private final ServiceClient serviceClient;
    // private final ServiceMedicamentDB serviceMedicamentDB;

    @Autowired
    public SysPharmaSpringApplication(ServiceClient serviceClient /*, ServiceMedicamentDB serviceMedicamentDB */) {
        this.serviceClient = serviceClient;
        // this.serviceMedicamentDB = serviceMedicamentDB;
    }

    public static void main(String[] args) {
        logger.info("D√©marrage de l'application SysPharma Spring Boot...");
        ConfigurableApplicationContext context = SpringApplication.run(SysPharmaSpringApplication.class, args);
        logger.info("Application SysPharma Spring Boot d√©marr√©e et contexte initialis√©.");
        // Ne fermez pas le contexte ici pour une application interactive en console
        // qui attend des entr√©es utilisateur dans la m√©thode run().
        // Le programme se terminera naturellement √† la fin de la m√©thode run()
        // et Spring s'occupera du shutdown.
    }

    @Override
    public void run(String... args) throws Exception {
        // Utilisation du logger pour tracer les √©v√©nements importants
        logger.info("--- Application SysPharma (Spring Boot) D√©marr√©e ---");
        logger.debug("ServiceClient inject√© : {}", (serviceClient != null)); // Utilisation du placeholder SLF4J

        try (Scanner scanner = new Scanner(System.in)) {
            System.out.println("=== üì¶ SystPharma - Bienvenue ===");
            System.out.print("1Ô∏è‚É£ Cr√©er un compte ou 2Ô∏è‚É£ Se connecter ? [1/2] : ");
            String choixInitial = scanner.nextLine();
            logger.info("Choix initial de l'utilisateur : {}", choixInitial);


// ...
            if ("1".equals(choixInitial)) {
                System.out.println("üìù Cr√©ation de compte");
                System.out.print("Nom : "); String nom = scanner.nextLine();
                System.out.print("Pr√©nom : "); String prenom = scanner.nextLine(); // Pr√©nom pourrait √™tre optionnel, √† vous de voir
                System.out.print("Email : "); String email = scanner.nextLine();
                System.out.print("Adresse : "); String adresse = scanner.nextLine(); // Adresse pourrait √™tre optionnelle
                System.out.print("T√©l√©phone : "); String tel = scanner.nextLine(); // T√©l√©phone pourrait √™tre optionnel
                System.out.print("Mot de passe : "); String pwd = scanner.nextLine();

                // --- VALIDATIONS DE BASE C√îT√â PR√âSENTATION (pour feedback rapide) ---
                boolean entreesValides = true;
                if (nom == null || nom.trim().isEmpty()) {
                    System.err.println("‚ùå Le nom ne peut pas √™tre vide.");
                    logger.warn("Tentative de cr√©ation de compte avec nom vide.");
                    entreesValides = false;
                }
                // Regex simple pour la pr√©sentation, le service peut avoir une validation plus stricte si besoin
                if (email == null || !email.matches("^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$")) {
                    System.err.println("‚ùå Format d'email invalide.");
                    logger.warn("Tentative de cr√©ation de compte avec email invalide: {}", email);
                    entreesValides = false;
                }
                if (pwd == null || pwd.length() < 6) { // Longueur minimale
                    System.err.println("‚ùå Le mot de passe doit contenir au moins 6 caract√®res.");
                    logger.warn("Tentative de cr√©ation de compte avec mot de passe trop court pour l'email: {}", email);
                    entreesValides = false;
                }

                if (entreesValides) {
                    // Si les validations de base de la pr√©sentation passent, on appelle le service.
                    // Le service refera ses propres validations (qui peuvent √™tre plus compl√®tes).
                    Client nouveauClient = new Client(nom, prenom, email, adresse, tel, pwd, Role.CLIENT);
                    logger.info("Tentative de cr√©ation de compte via le service pour l'email : {}", email);
                    try {
                        if (this.serviceClient.creerCompte(nouveauClient)) {
                            System.out.println("‚úÖ Compte client cr√©√© avec succ√®s ! Vous pouvez maintenant vous connecter.");
                            logger.info("Compte client cr√©√© avec succ√®s pour : {}", email);
                        } else {
                            // Ce cas est moins probable si creerCompte l√®ve des BusinessException pour les √©checs m√©tier
                            System.out.println("‚ùå √âchec de la cr√©ation du compte (raison m√©tier non sp√©cifi√©e par exception).");
                            logger.warn("√âchec de la cr√©ation du compte (service a retourn√© false) pour : {}", email);
                        }
                    } catch (BusinessException e) {
                        // BusinessException lev√©e par le service (ex: email d√©j√† pris, validation m√©tier interne √©chou√©e)
                        System.err.println("‚ùå Erreur lors de la cr√©ation du compte : " + e.getMessage());
                        logger.error("BusinessException lors de la cr√©ation du compte pour {} : {}", email, e.getMessage(), e.getCause() != null ? e.getCause() : e);
                    }
                }
                // Si entreesValides est false, l'utilisateur a d√©j√† eu son message d'erreur de la pr√©sentation.


            } else if ("2".equals(choixInitial)) {
                System.out.print("Email : "); String emailLogin = scanner.nextLine();
                System.out.print("Mot de passe : "); String pwdLogin = scanner.nextLine(); // Ne pas logger le mot de passe en clair
                logger.info("Tentative de connexion pour l'email : {}", emailLogin);
                try {
                    if (this.serviceClient.seConnecter(emailLogin, pwdLogin)) {
                        System.out.println("üîì Connexion r√©ussie via Spring!");
                        logger.info("Connexion r√©ussie pour : {}", emailLogin);
                        // afficherMenuClientConnecte(scanner, this.serviceClient);
                    } else {
                        System.out.println("‚ùå √âchec de connexion. Email ou mot de passe incorrect.");
                        logger.warn("√âchec de connexion (identifiants incorrects) pour : {}", emailLogin);
                    }
                } catch (BusinessException e) {
                    System.err.println("‚ùå Erreur m√©tier lors de la connexion : " + e.getMessage());
                    logger.error("Erreur m√©tier lors de la connexion pour {} : {}", emailLogin, e.getMessage(), e); // Log avec la stack trace
                }
            } else {
                System.out.println("‚õî Choix invalide.");
                logger.warn("Choix utilisateur invalide : {}", choixInitial);
            }
        } // Le scanner est ferm√© ici
        logger.info("--- Application SysPharma Termin√©e (ou fin de la session interactive) ---");
    }

    // private void afficherMenuClientConnecte(Scanner scanner, ServiceClient clientService) { ... }
}